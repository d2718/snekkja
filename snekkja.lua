#!/usr/bin/lua

--[[ snekkja (.lua)

Generate small, simple image galleries.

https://github.com/d2718/snekkja
2019-09-25

--]]

local TEST = { entries=false, config=false }

local shell = require 'shell'
local json  = require 'dkjson'
local argz  = require 'dargs'
local dfmt  = require 'dfmt'

local EXT_PATT = '%.[^.]+$'

local HELP = [[
snekkja: Generate a simple web gallery.

usage: snekkja [ -h | -c ]

    -h, --help      display this message
    -c, --config    write a default configuration file to config.lua

]]

local INDEX = [[<!doctype html>
<html><head>
<meta charset="utf-8">
<title>${gal_title}</title>
<script type="text/javascript" src="data.js"></script>
<link rel="stylesheet" href="snekkja.css"><link rel="stylesheet" href="user.css">
<script type="text/javascript">const preview_size = ${thumb_size};</script>
</head><body>

<!-- Gallery generated by snekkja:
     https://github.com/d2718/snekkja -->

<div id="flexcol">
<div id="header">${gal_title}</div><div id="main"></div><div id="caption"></div>
<div id="thumbcontainer">
<img id="larrow" class="arrow" src="https://d2718.net/hosted/snekkja/prev.svg">
<div id="thumbstrip"></div>
<img id="rarrow" class="arrow" src="https://d2718.net/hosted/snekkja/next.svg"></div>
<div id="footer"></div><div id="zoom"><img id="zoomimg"></div>
<!-- <div id="debug_div"></div></div> -->
<script type="text/javascript" src="https://d2718.net/hosted/snekkja/snekkja.js"></script>
</body></html>]]

local STYLESHEET = [[
body { background-color: #333; color: #abb; margin: 0; border: 0; padding: 0;
z-index: 0; }
#flexcol {  height: 100vh;  display: flex; flex-direction: column; opacity: 1.0;
flex-wrap: nowrap; justify-content: space-between; align-items: center; }
#flexcol > div { margin-top: 1em; ;}
#header { text-align: center; flex-shrink: 0; }
#main { text-align: center; flex-shrink: 1; min-height: 0; overflow: hidden; }
#main img { max-width: 100vw; }
#thumbstrip { display: flex; justify-content: center; align-items: center;
align-content: center; flex-shrink: 0; }
#thumbcontainer { position: relative; align-self: stretch; }
#thumbstrip div { position: relative; display: inline-block; overflow: hidden;
height: ${thumb_size}px; width: ${thumb_size}px; border: 4px solid black;
margin: 4px; }
#thumbstrip div img { position: absolute; }
div#thumbstrip div.thumblight { border: 4px solid gray; }
img.arrow { position: absolute; display: inline-block; z-index: 1; height: 50%;
top: 25%; background-color: white; opacity: 0.5; }
#larrow { left: 2em; }
#rarrow { right: 2em; }
#footer { text-align: center; flex-shrink: 0; }
body div#zoom { position: fixed; top: 0; left: 0; margin: 0; height: 100vh;
width: 100vw; background-color: rgba(32, 32, 32, 0.8); display: none;
z-index: 2;}
#zoomimg { position: absolute; left: 0; right: 0; margin: auto;
max-width: 100vw; max-height: 100vh; display: block;}
#debug_div { font-family: monospace; white-space: pre; }]]

local CONFIG = [[
-- snekkja Gallery Configuration File

return {
-- Title to be displayed at the top of the gallery page. A non-string
-- value will result in no title.
    ['gallery_title'] = nil,

-- Size in pixels of the thumbnail images along the bottom of the page.
    ['thumbnail_size'] = 100,

-- Recognized image file extensions.
    ['file_extensions'] = 'jpg,jpeg,png,gif,bmp,webp',

-- Default caption given to images with no accompanying caption file.
-- A non-string value will result in no caption.
    ['default_caption'] = nil,

-- Whether the image metadata file (data.js) generated by running snekkja
-- should look nice. Setting this to false saves a few whitespace bytes.
    ['pretty_json'] = true,

-- Comparison function used to sort filenames for image ordering in
-- the gallery. The sorting function should take two filenames as arguments
-- and return true if the first argument should sort before the second.
    ['sort_func'] = function(a, b) return a < b end
}
]]

local config = {
    ['gallery_title'] = nil,
    ['thumbnail_size'] = 100,
    ['file_extensions'] = 'jpg,jpeg,png,gif,bmp,webp',
    ['default_caption'] = nil,
    ['pretty_json'] = true,
    ['sort_func'] = function(a, b) return a < b end
}

local image_t = {}

-- Exit on error with an explanation
local function die(fmtstr, ...)
    local msg = string.format(fmtstr, args)
    io.stderr:write(msg)
    if msg:sub(#msg, #msg) ~= '\n' then io.stderr:write('\n') end
    os.exit(1)
end

-- Return the extension of a filename.
local function get_extension(fname)
    return string.match(fname, EXT_PATT)
end

-- Return a filename with its extension removed.
local function remove_extension(fname)
    local ext = get_extension(fname)
    if type(ext) ~= 'string' then return fname end
    return string.sub(fname, 1, #fname - #ext)
end

-- Read the configuration file and configure accordingly.
local function configure()
    local ok, cfg_t = pcall(dofile, 'config.lua')
    if TEST.config then
        local dump = require 'dump'
        print('\nin configure(): config file contents:')
        dump.dump(cfg_t)
    end
    if ok then
        for k, v in pairs(cfg_t) do
            config[k] = v
        end
    else
        io.stderr:write('Missing or mangled config file; using default values.\n')
    end
    
    for ext in string.gmatch(config.file_extensions, '[^,]+') do
        local exts = '.' .. string.lower(dfmt.trim(ext))
        image_t[exts] = true
    end
end

-- Return a list of all image files in the current directory.
local function get_file_list()
    local fnames = {}
    local p = io.popen('ls .')
    for fname in p:lines() do
        ext = get_extension(fname)
        if type(ext) == 'string' then
            if image_t[string.lower(ext)] then
                table.insert(fnames, fname)
            end
        end
    end
    p:close()
    table.sort(fnames, config.sort_func)
    return fnames
end

-- Generate a gallery info object for the image with the given filename.
local function make_entry_tab(fname)
    local cmd_toks = {'identify', '-ping', '-format', '%w %h', fname}
    local cmd = shell.escape(cmd_toks)
    local p = io.popen(cmd, 'r')
    local w, h = string.match(p:read('*all'), '(%d+)%s+(%d+)')
    p:close()
    if not (w and h) then
        return nil
    end
    local t = { ['u'] = fname, ['w'] = tonumber(w), ['h'] = tonumber(h) }
    local cap_fname = remove_extension(fname) .. '.html'
    local cf = io.open(cap_fname, 'r')
    if cf then
        t.c = cf:read('*all')
        cf:close()
    elseif config.default_caption then
        t.c = config.default_caption
    end
    return t
end

-- Write the gallery index file.
local function write_index(cfgt)
    local fmt_t = {
        ['gal_title'] = '',
        ['thumb_size'] = 100,
    }
    
    if type(cfgt.gallery_title) == 'string' then
        fmt_t.gal_title = cfgt.gallery_title
    end
    if type(cfgt.thumbnail_size) == 'number' then
        fmt_t.thumb_size = cfgt.thumbnail_size
    end
    
    local idx_txt = dfmt.pfmt(INDEX, fmt_t)

    local f, err = io.open('index.html', 'w')
    if not f then
        die('Error opening file "index.html" for writing: %s\n', err)
    end
    f:write(idx_txt)
    f:close()
end

local function write_css(cfgt)
    local fmt_t = { ['thumb_size'] = 100 }
    
    if type(cfgt.thumbnail_size) == 'number' then
        fmt_t.thumb_size = cfgt.thumbnail_size
    end
    
    local css_txt = dfmt.pfmt(STYLESHEET, fmt_t)
    
    f, err = io.open('snekkja.css', 'w')
    if not f then
        die('Error opening file "snekkja.css" for writing: %s\n', err)
    end
    f:write(css_txt)
    f:close()
end

--
-- Testing section.
--

local TESTED = false

if TEST.entries then
    local dump = require 'dump'
    local fnamez = get_file_list()
    local entriez = {}
    for _, fname in ipairs(fnamez) do
        local e = make_entry_tab(fname)
        if e then
            table.insert(entriez, e)
        end
    end
    print('\nEntries:')
    dump.dump(entriez)
    TESTED = true
end
if TEST.config then
    local dump = require 'dump'
    local cfg_keys = {}
    for k, _ in pairs(config) do table.insert(cfg_keys, k) end
    print('\na-priori Config Keys:')
    dump.dump(cfg_keys)
    configure()
    dump.dump(config)
    TESTED = true
end

if TESTED then os.exit(0) end

--
-- Now do the stuff for realz.
--

if argz['h'] or argz['help'] then
    io.stdout:write(HELP)
    os.exit(0)
elseif argz['c'] or argz['config'] then
    local f, err = io.open('config.lua', 'w')
    if not f then
        die('Error opening file "config.lua" for writing: %s\n', err)
    end
    f:write(CONFIG)
    f:close()
    os.exit(0)
end

configure()

local filenames = get_file_list()
local img_entries = {}
for _, fn in ipairs(filenames) do
    local e = make_entry_tab(fn)
    if e then table.insert(img_entries, e) end
end

local ok, data_string = pcall(json.encode, img_entries,
                              { indent=config['pretty_json'] })
if not ok then
    die('Error encoding JSON data: %s\n', data_string)
end

local dataf, err = io.open('data.js', 'w')
if not dataf then
    die('Error opening file "data.js" for writing: %s\n', err)
end
dataf:write('var img_data = ')
dataf:write(data_string)
dataf:write(';\n')
dataf:close()

write_index(config)
write_css(config)
